**********************  1. Solution using DFS  ************************************


class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycleDfs(vector<vector<int>>& adj, vector<bool> &vis , int u, int parent){
        vis[u] = true;
        
        for(auto v : adj[u]){
            if(v == parent) continue;
            
            if(vis[v]) return true;
            
            if(isCycleDfs(adj, vis, v, u))
                return true;
        }
        return false;
    }
    bool isCycle(vector<vector<int>>& adj) {
        // Code here
        int V = adj.size();
        vector<bool> vis(V, false);
        
        for(int u = 0; u < V; u++){
            if(!vis[u] && isCycleDfs(adj,vis, u, -1))
                return true;
        }
        return false;
    }
};


*****************  2. Solution using BFS  ******************************


class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycleBfs(vector<vector<int>>& adj, vector<bool> &vis , int u){
        
        queue<pair<int,int>> q;
        q.push({u, -1});
        vis[u] = true;
        
        while(!q.empty()){
            pair<int, int> p = q.front();
            q.pop();
            
            int source = p.first;
            int parent = p.second;
            
            for(auto & v : adj[source]){
                if(!vis[v]){
                    q.push({v, source});
                    vis[v] = true;
                }
                else if(v != parent)
                    return true;
            }
        }
        return false;
    }
    bool isCycle(vector<vector<int>>& adj) {
        // Code here
        int V = adj.size();
        vector<bool> vis(V, false);
        
        for(int u = 0; u < V; u++){
            if(!vis[u] && isCycleBfs(adj,vis, u))
                return true;
        }
        return false;
    }
};


*****************   3. Solution using DSU  ************************


class Solution
{
    public:
    //Function to detect cycle using DSU in an undirected graph.
    vector<int> parent, rank;
    
    int find(int x){
        if(x == parent[x])
            return x;
        return parent[x] = find(parent[x]);
    }
    
    void Union(int x, int y){
        int parent_x = find(x);
        int parent_y = find(y);
        
        if(parent_x == parent_y) return;
        
        if(rank[parent_x] > rank[parent_y])
            parent[parent_y] = parent_x;
        else if(rank[parent_x] < rank[parent_y])
            parent[parent_x] = parent_y;
        else{
            parent[parent_y] = parent_x;
            rank[parent_x] ++;
        }
    }
    
	int detectCycle(int V, vector<int>adj[]){
	    // Code here
	    parent.resize(V);
	    rank.resize(V);
	    
	    for(int i = 0; i < V; i++){
	        parent[i] = i;
	        rank[i] = 1;
	    }
	    
	    for(int u = 0; u < V; u++){
	        for(auto v : adj[u]){
	            if(u < v){
	                int parent_u = find(u);
	                int parent_v = find(v);
	                
	                if(parent_u == parent_v) return 1;
	                Union(parent_u, parent_v);
	            }
	        }
	    }
	    return 0;
	}
};
