****************************** Using DFS ***********************************

class Solution {
  public:
    // Function to return list containing vertices in Topological order.
    stack<int> topo;
    void dfs(vector<vector<int>> & adj, vector<bool> &vis, int u){
        vis[u] = true;
        for(auto &v : adj[u]){
            if(!vis[v])
                dfs(adj, vis, v);
        }
        topo.push(u);
    }
    
    vector<int> topologicalSort(vector<vector<int>>& adj) {
        // Your code here
        int V = adj.size();
        
        
        vector<bool> vis(V, false);
        
        for(int u = 0; u < V; u++){
            if(!vis[u])
                dfs(adj, vis, u);
        }
        
        vector<int> ans;
        while(!topo.empty()){
            ans.push_back(topo.top());
            topo.pop();
        }
        return ans;
    }
};

***********************************  Using BFS / Kahn's Algorithm *************************************************

class Solution {
  public:
    vector<int> topologicalSort(vector<vector<int>>& adj) {
        // Your code here
        int V = adj.size();
        
        vector<int> indegree(V, 0);
        
        for(int u = 0; u < V; u++){
            for(auto &v : adj[u]){
                indegree[v]++;
            }
        }
        
        queue<int> q;
        
        for(int u = 0; u < V; u++){
            if(indegree[u] == 0)
                q.push(u);
        }
        
        vector<int>result;
        while(!q.empty()){
            int source = q.front();
            q.pop();
            result.push_back(source);
            for(auto &v : adj[source]){
                indegree[v]--;
                if(indegree[v] == 0){
                    q.push(v);
                }
            }
        }
        return result;
    }
};
